/* 
* 96. Unique Binary Search Trees
* Problem description can be found at https://leetcode.com/problems/unique-binary-search-trees/

Find the number of structurally unique binary search trees that can be generated by n number of nodes.
Solved using dynamic programming with an array of n nodes (starting with n = 1, 2, and 3).

Example 1:
Input: n = 1
Output: 1

Example 2:
Input: n = 3
Output: 5

Example 3:
Input: n = 4
Output: 14

Example 4:
Input: n = 5
Output: 42

Example 5:
Input: n = 6
Output: 132

*/

/*
Success
Details 
Runtime: 0 ms, faster than 100.00% of C++ online submissions for Unique Binary Search Trees.
Memory Usage: 5.9 MB, less than 66.07% of C++ online submissions for Unique Binary Search Trees.
*/

class Solution {
public:
    int numTrees(int n) {
        vector<int> dp(n + 1, 0);
        dp[0] = 0;
        dp[1] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                if (j - 1 == 0 || j - i == 0) {
                    dp[i] += dp[i - 1];
                }
                else {
                    dp[i] += dp[j - 1] * dp[i - j];
                }                
            }
        }
        return dp[n];
    }
};